// Generated by IcedCoffeeScript 1.3.3f
(function() {
  var LiveEditUser, ccall, cclose, chatsend, codeEditor, copen, count, handleEditorChange, lastChange, prepareSettingsModal, server, store, user, ws, wsconnect, wsdisconnect, wsreconnect;

  if (!(typeof WebSocket !== "undefined" && WebSocket !== null)) {
    alert("client does not support websockets");
  }

  if (!(typeof localStorage !== "undefined" && localStorage !== null)) {
    alert("client does not support local storage");
  }

  ws = null;

  count = 1;

  store = localStorage;

  server = "wss://" + window.location.host + "/collab";

  copen = new Audio("snd/c-open.ogg");

  cclose = new Audio("snd/c-close.ogg");

  ccall = new Audio("snd/c-call.ogg");

  lastChange = "";

  LiveEditUser = (function() {

    function LiveEditUser() {}

    LiveEditUser.prototype.save = function() {
      store["userName"] = this.name;
      store["theme"] = this.theme;
      store["mode"] = this.mode;
      store["lineNumbers"] = this.lineNumbers;
      store["gutter"] = this.gutter;
      store["tabSize"] = this.tabSize;
      store["indentWithTabs"] = this.indentWithTabs;
      return store["lineWrapping"] = this.lineWrapping;
    };

    LiveEditUser.prototype.load = function() {
      this.name = store["userName"];
      this.mode = store["mode"];
      this.theme = store["theme"];
      this.lineNumbers = store["lineNumbers"];
      this.gutter = store["gutter"];
      this.tabSize = store["tabSize"];
      this.indentWithTabs = store["indentWithTabs"];
      return this.lineWrapping = store["lineWrapping"];
    };

    return LiveEditUser;

  })();

  user = new LiveEditUser;

  user.load();

  if (!(user.name != null)) {
    $('#settings').modal({
      show: true
    });
  }

  if (!(user.name != null)) {
    user.name = prompt("no username in storage, please enter one now", "nobody");
  }

  if (!(user.mode != null)) user.mode = "javascript";

  if (!(user.theme != null)) user.theme = "cobalt";

  user.save();

  $('#profile-name').html("<i class='icon-user'></i> " + user.name + " <span class='caret'></span></a>");

  wsconnect = function() {
    if (ws != null) ws.close();
    ws = new WebSocket(server);
    ws.onopen = function() {
      ws.send(JSON.stringify({
        Action: "update-nick",
        Data: user.name
      }));
      return copen.play();
    };
    ws.onclose = function() {
      return cclose.play();
    };
    ws.onerror = function() {
      return console.log("socket error");
    };
    return ws.onmessage = function(e) {
      var d, x;
      x = JSON.parse(e.data);
      switch (x.Action) {
        case "inform":
          $('#chat').html("" + ($('#chat').html()) + "<p><span class='label label-info'> " + x.Data + "</span></p>");
          return ccall.play();
        case "speech":
          d = new Date();
          $('#chat').html("" + ($('#chat').html()) + "<blockquote><p>" + x.Data + "</p><small>" + x.Origin + " - " + (d.getHours()) + ":" + (d.getMinutes()) + ":" + (d.getSeconds()) + "</small></blockquote>");
          $('#chat').scrollTop(999999999);
          return copen.play();
        case "update-editor":
          codeEditor.setOption('onChange', null);
          updateEditor(x.Data);
          codeEditor.setOption('onChange', handleEditorChange);
          return lastChange = x.Data;
        case "fetch-editor":
          return ws.send(JSON.stringify({
            Action: "update-editor-full",
            Data: codeEditor.getValue(),
            Origin: x.Origin
          }));
        case "update-editor-full":
          codeEditor.setOption('onChange', null);
          codeEditor.setValue(x.Data);
          return codeEditor.setOption('onChange', handleEditorChange);
      }
    };
  };

  function updateEditor(data) {
	var payload = JSON.parse(data);
	codeEditor.replaceRange(payload.text.join("\n"), payload.from, payload.to);

	while('next' in payload) {
		payload = payload.next
		codeEditor.replaceRange(payload.text.join("\n"), payload.from, payload.to);
	}
};


  wsdisconnect = function() {
    if (ws) return;
    ws.close();
    return ws = null;
  };

  wsreconnect = function() {
    wsdisconnect();
    return wsconnect();
  };

  $('#ux-connect').click(function() {
    return wsconnect();
  });

  $('#ux-disconnect').click(function() {
    return wsdisconnect();
  });

  $('#ux-reconnect').click(function() {
    return wsreconnect();
  });

  chatsend = function() {
    var input;
    input = $("#chat-message");
    if (input.val() === "") return;
    ws.send(JSON.stringify({
      Action: "speech",
      Data: input.val()
    }));
    input.focus();
    return input.select();
  };

  $('#chat-send').click(function() {
    return chatsend();
  });

  $('#chat-message').keypress(function(e) {
    if (e.keyCode === 13) return chatsend();
  });

  $('#ux-chat-clear').click(function() {
    return $('#chat').html("");
  });

  $('#ux-editor-clear').click(function() {
    return codeEditor.setValue("");
  });

  $('#ux-editor-sync').click(function() {
    return ws.send(JSON.stringify({
      Action: "fetch-editor"
    }));
  });

  $('#settings-save').click(function() {
    store.clear();
    if (user.name !== $('#settings-username').val()) {
      ws.send(JSON.stringify({
        Action: "update-nick",
        Data: $('#settings-username').val()
      }));
    }
    user.name = $('#settings-username').val();
    user.theme = $('#settings-theme').val();
    user.mode = $('#settings-mode').val();
    user.tabSize = $('#settings-tabSize').val();
    user.lineWrapping = $('#settings-lineWrapping').is(':checked');
    user.gutter = $('#settings-gutter').is(':checked');
    user.lineNumbers = $('#settings-lineNumbers').is(':checked');
    user.indentWithTabs = $('#settings-indentWithTabs').is(':checked');
    $('#profile-name').html("<i class='icon-user'></i> " + user.name + " <span class='caret'></span></a>");
    codeEditor.setOption("mode", user.mode);
    codeEditor.setOption("theme", user.theme);
    codeEditor.setOption("lineWrapping", user.lineWrapping);
    codeEditor.setOption("tabSize", user.tabSize);
    codeEditor.setOption("gutter", user.gutter);
    codeEditor.setOption("lineNumbers", user.lineNumbers);
    codeEditor.setOption("indentWithTabs", user.indentWithTabs);
    codeEditor.refresh();
    return user.save();
  });

  prepareSettingsModal = function() {
    $('#settings-username').val(user.name);
    $('#settings-theme').val(user.theme);
    $('#settings-mode').val(user.mode);
    $('#settings-tabSize').val(user.tabSize);
    $('#settings-lineWrapping').prop("checked", user.lineWrapping);
    $('#settings-gutter').prop("checked", user.gutter);
    $('#settings-lineNumbers').prop("checked", user.lineNumbers);
    return $('#settings-indentWithTabs').prop("checked", user.indentWithTabs);
  };

  prepareSettingsModal();

  codeEditor = CodeMirror(editor, {
    indentWithTabs: true,
    theme: user.theme,
    mode: user.mode,
    gutter: user.gutter,
    lineNumbers: user.lineNumbers,
    tabSize: user.tabSize,
    indentWithTabs: user.indentWithTabs,
    lineWrapping: user.lineWrapping,
    value: "//blank document"
  });

  handleEditorChange = function(o, u) {
    if (lastChange !== u) {
      return ws.send(JSON.stringify({
        Action: 'update-editor',
        Data: JSON.stringify(u)
      }));
    }
  };

  wsconnect();

  codeEditor.setOption('onChange', handleEditorChange);

}).call(this);
